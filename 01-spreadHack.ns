/** @param {NS} ns **/
export async function main(ns) {
    var force = ns.args[0];
    await spreadHack(ns,force);
}

export async function spreadHack(ns, forceDelete = true, host = "home", parent = null) {
    let servers = ns.scan(host);
    let scriptname = "basicHack.ns";
    ns.print("Hosts on " + host + ": " + servers);
    for (let i = 0; i < servers.length; i++) {
        let curServer = ns.getServer(servers[i]);

        if ((curServer.hostname != "home") && curServer.hostname != parent) {
            //ns.print("Required hacking level " + curServer.requiredHackingSkill);
            if (curServer.requiredHackingSkill <= ns.getHackingLevel()) {
                if (!curServer.hasAdminRights){
                    if (ns.fileExists("BruteSSH.exe", "home") && !curServer.sshPortOpen && (curServer.openPortCount < curServer.numOpenPortsRequired)) {
                        ns.print("Opening SSH port on " + curServer.hostname);
                        ns.brutessh(curServer.hostname);
                    }
                    if (ns.fileExists("FTPCrack.exe", "home") && !curServer.ftpPortOpen && (curServer.openPortCount < curServer.numOpenPortsRequired)) {
                        ns.print("Opening ftp port on " + curServer.hostname);
                        ns.ftpcrack(curServer.hostname);
                    }
                    if (ns.fileExists("relaySMTP.exe", "home") && !curServer.smtpPortOpen && (curServer.openPortCount < curServer.numOpenPortsRequired)) {
                        ns.print("Opening smtp port on " + curServer.hostname);
                        ns.relaysmtp(curServer.hostname);
                    }
                    if (ns.fileExists("HTTPWorm.exe", "home") && !curServer.httpPortOpen && (curServer.openPortCount < curServer.numOpenPortsRequired)) {
                        ns.print("Opening http port on " + curServer.hostname);
                        ns.httpworm(curServer.hostname);
                    }
                    if (ns.fileExists("SQLInject.exe", "home") && !curServer.sqlPortOpen && (curServer.openPortCount < curServer.numOpenPortsRequired)) {
                        ns.print("Opening sql port on " + curServer.hostname);
                        ns.sqlinject(curServer.hostname);
                    }

                    ns.print("Checking port count on " + curServer.hostname);
                    if (curServer.openPortCount >= curServer.numOpenPortsRequired) {
                        ns.print("Nuking " + curServer.hostname);
                        ns.nuke(curServer.hostname);
                    }
                }

                ns.print("Server has admin rights: " + curServer.hasAdminRights);
                if (curServer.hasAdminRights) {
                    /*if (!curServer.backdoorInstalled) {
                        installBackdoor()
                    }*/
                    let ramUsageOfScript = ns.getScriptRam(scriptname);
                    let maxNumThreads = Math.floor(curServer.maxRam / ramUsageOfScript);
                    //ns.print("Script could run " + maxNumThreads + " times");

                    if(forceDelete && ns.fileExists(scriptname, curServer.hostname)) {
                        await ns.kill(scriptname, curServer.hostname);
                        await ns.rm(scriptname, curServer.hostname);
                    }
                    if (!ns.fileExists(scriptname, curServer.hostname)) {
                        await ns.scp(scriptname, "home", curServer.hostname);
                    }

                    ns.print("Starting script on " + curServer.hostname + " with " + maxNumThreads + " threads.");
                    if (maxNumThreads >= 1 && !ns.scriptRunning(scriptname, curServer.hostname)) {
                        ns.exec(scriptname, curServer.hostname, maxNumThreads);
                    }
                }
            }

            await spreadHack(ns, true, curServer.hostname, host)
        }
    }

    await ns.sleep(10);
}