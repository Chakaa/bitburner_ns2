/** @param {NS} ns **/
export async function main(ns) {
    await buildHacknetwork(ns);
}

export async function buildHacknetwork(ns) {
    let moneyPart = .01;
    let hn = ns.hacknet;

    while(true){
        let allowedMoney = ns.getServerMoneyAvailable("home")*(hn.numNodes()<3?1:moneyPart);

        let index=-1;
        let kind = "";
        let minCost=Infinity;

        let newNodeCost = hn.getPurchaseNodeCost();

        for(let i=0;i<hn.numNodes();i++){
            let levelCost = hn.getLevelUpgradeCost(i, 1);
            let ramCost = hn.getRamUpgradeCost(i, 1);
            let coreCost = hn.getCoreUpgradeCost(i, 1);

            if(levelCost<allowedMoney && levelCost<minCost){
                index=i;
                kind="l";
                minCost=levelCost;
            }else if(ramCost<allowedMoney && ramCost<minCost){
                index=i;
                kind="r";
                minCost=ramCost;
            }else if(coreCost<allowedMoney && coreCost<minCost){
                index=i;
                kind="c";
                minCost=coreCost;
            }
        }
        switch(kind){
            case "l":
                hn.upgradeLevel(index,1);
                ns.print("Bought Level on index :"+index);
                break;
            case "r":
                hn.upgradeRam(index,1);
                ns.print("Bought RAM on index :"+index);
                break;
            case "c":
                hn.upgradeCore(index,1);
                ns.print("Bought Core on index :"+index);
                break;
            case "":
                if(newNodeCost<allowedMoney){
                    ns.print("Bought new node");
                    hn.purchaseNode();
                }else{
                    return;
                }
                break;
        }
        await ns.sleep(10);
    }
}